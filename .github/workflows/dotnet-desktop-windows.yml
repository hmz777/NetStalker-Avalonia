# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop (Windows)

on: 
  push:
    tags:
    - '*'
  workflow_dispatch:
    
    
jobs:

  build-test-publish:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest
    permissions:
      contents: write

    env:
      Solution_Name: NetStalkerAvalonia.sln                  # Replace with your solution name, i.e. MyWpfApp.sln.
      Windows_Project: NetStalkerAvalonia.Windows.csproj
      Test_Project_Path: NetStalker.Tests.csproj             # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Release_Version: ${{ github.ref_name }}
      Assembly_Version: 0
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $Windows_Project
      working-directory: NetStalkerAvalonia.Windows
      env:
        Configuration: ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $Test_Project_Path --no-restore
      working-directory: NetStalker.Tests
      
    - name: Set assembly version
      if: contains(env.Release_Version, '-')
      run: |
        $AssemblyVersion=$env:Release_Version.split('-')[0]
        echo "Assembly_Version=$AssemblyVersion" >> $env:GITHUB_ENV
    
    # Publish application
    - name: Publish the application
      run: dotnet publish $Windows_Project --no-restore --output ../Output.Windows --runtime win10-x86 --self-contained false /p:DebugType=None /p:DebugSymbols=false /p:FileVersion=$Release_Version /p:AssemblyVersion=$Assembly_Version
      working-directory: NetStalkerAvalonia.Windows
      env:
        Configuration: ${{ matrix.configuration }}
    
    - name: Install InnoSetup
      uses: crazy-max/ghaction-chocolatey@v2
      with:
        args: install InnoSetup

    - name: Package application
      run: iscc NetStalkerSetupScript.Windows.iss
    
    - name: Create a release with a setup file
      uses: ncipollo/release-action@v1
      with:
        artifacts: "InstallerOutput/NetStalkerSetup.exe"
        skipIfReleaseExists: true

    #- name: Pull windows nanoserver, tag and run it
    #  run: docker pull mcr.microsoft.com/windows/nanoserver:20H2
    #       docker tag mcr.microsoft.com/windows/nanoserver:20H2 windows:20H2
    #       run windows:20H

    #- name: Copy output files to container
    #  run: docker exec powershell BuildInstaller.ps1

    #- name: Run the setup build script
    #  run: docker exec powershell BuildInstaller.ps1       
